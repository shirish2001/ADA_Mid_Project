# -*- coding: utf-8 -*-
"""Midterm_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w0DiszrRVMCzmtD3bPsOF7gmnzXH2Vhq
"""

import time
import random
import numpy as np
import matplotlib.pyplot as plt

def generate_input(size, input_type=None):
    if input_type is None:
        if size <= 100:
            input_type = 'random'
        elif size <= 1000:
            input_type = 'random_k'
        elif size <= 1000000:
            input_type = 'random_cube'
        elif size <= 100000000:
            input_type = 'random_log'
        else:
            input_type = 'random_multiple_1000'

    if input_type == 'random':
        return list(np.random.randint(0, size, size=size))
    elif input_type == 'random_k':
        k = min(1000, size)
        return list(np.random.randint(0, k, size=size))
    elif input_type == 'random_cube':
        max_cube = np.iinfo(np.int32).max
        max_size = int((max_cube ** (1/3)) // 2)
        size = min(size, max_size)
        return list(np.random.randint(0, size**3, size=size))
    elif input_type == 'random_log':
        return list(np.random.randint(0, int(np.log2(size)), size=size))
    elif input_type == 'random_multiple_1000':
        return list(np.random.randint(0, size, size=size) * 1000)
    elif input_type == 'partially_sorted':
        arr = list(range(size))
        for _ in range(int(np.log2(size)) // 2):
            i, j = random.sample(range(size), 2)
            arr[i], arr[j] = arr[j], arr[i]
        return arr

def time_sorting_algorithm(algorithm, input_data):
    start_time = time.time()
    algorithm(input_data)
    end_time = time.time()
    return end_time - start_time

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

def heap_sort(arr):
    n = len(arr)
    for i in range(n//2 - 1, -1, -1):
        heapify(arr, n, i)
    for i in range(n-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)
    return arr

def heapify(arr, n, i):
    largest = i
    l = 2 * i + 1
    r = 2 * i + 2
    if l < n and arr[l] > arr[largest]:
        largest = l
    if r < n and arr[r] > arr[largest]:
        largest = r
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        heapify(arr, n, largest)

def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0

        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

def radix_sort(arr):
    max_num = max(arr)
    exp = 1
    while max_num // exp > 0:
        counting_sort(arr, exp)
        exp *= 10
    return arr

def counting_sort(arr, exp):
    n = len(arr)
    output = [0] * n
    count = [0] * 10
    for i in range(n):
        index = arr[i] // exp
        count[index % 10] += 1
    for i in range(1, 10):
        count[i] += count[i - 1]
    i = n - 1
    while i >= 0:
        index = arr[i] // exp
        output[count[index % 10] - 1] = arr[i]
        count[index % 10] -= 1
        i -= 1
    i = 0
    for i in range(0, len(arr)):
        arr[i] = output[i]
    return arr

def bucket_sort(arr):
    n = len(arr)
    max_val = max(arr)
    bucket = [[] for _ in range(n)]
    for num in arr:
        index = int(num / max_val * (n - 1))
        bucket[index].append(num)
    for i in range(n):
        bucket[i] = insertion_sort(bucket[i])
    k = 0
    for i in range(n):
        for j in range(len(bucket[i])):
            arr[k] = bucket[i][j]
            k += 1
    return arr

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

def merge(arr, start, mid, end):
    left = arr[start:mid+1]
    right = arr[mid+1:end+1]
    left_index, right_index = 0, 0
    sorted_index = start

    while left_index < len(left) and right_index < len(right):
        if left[left_index] <= right[right_index]:
            arr[sorted_index] = left[left_index]
            left_index += 1
        else:
            arr[sorted_index] = right[right_index]
            right_index += 1
        sorted_index += 1

    while left_index < len(left):
        arr[sorted_index] = left[left_index]
        left_index += 1
        sorted_index += 1

    while right_index < len(right):
        arr[sorted_index] = right[right_index]
        right_index += 1
        sorted_index += 1

def tim_sort(arr):
    min_run = 32
    n = len(arr)
    for i in range(0, n, min_run):
        insertion_sort(arr[i:min((i + min_run), n)])
    size = min_run
    while size < n:
        for start in range(0, n, size*2):
            mid = min(start + size - 1, n - 1)
            end = min(start + 2*size - 1, n - 1)
            merge(arr, start, mid, end)
        size *= 2
    return arr

sorting_algorithms = {
    "Quick Sort": quick_sort,
    "Heap Sort": heap_sort,
    "Merge Sort": merge_sort,
    "Radix Sort": radix_sort,
    "Bucket Sort": bucket_sort,
    "TimSort": tim_sort
}

sizes = [1000000, 800, 20000, 400000, 600000, 100000]
input_type = 'random'

results = {algo: [] for algo in sorting_algorithms.keys()}

for size in sizes:
    input_data = generate_input(size, input_type)
    for algo_name, algo_func in sorting_algorithms.items():
        input_data_copy = input_data.copy()
        time_taken = time_sorting_algorithm(algo_func, input_data_copy)
        results[algo_name].append(time_taken)
        print(f"Execution time for {algo_name} with input size {size}: {time_taken} seconds")

# Plotting
plt.figure(figsize=(12, 8))
colors = ['b', 'g', 'r', 'c', 'm', 'y']
for i, (algo_name, times) in enumerate(results.items()):
    plt.bar(np.arange(len(sizes)) + 0.15 * i, times, width=0.15, color=colors[i], label=algo_name)

plt.xlabel('Input Size')
plt.ylabel('Time (seconds)')
plt.title('Comparison of Sorting Algorithms')
plt.xticks(np.arange(len(sizes)) + 0.3, sizes)
plt.yticks(np.arange(0, max([max(times) for times in results.values()]) + 0.5, 0.5))
plt.legend()
plt.grid(True)
plt.show()

