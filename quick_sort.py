# -*- coding: utf-8 -*-
"""Quick Sort.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k_l0DTTFH1d3sHXlfXJZnlcd-fx1D_mx
"""

import time
import random
import matplotlib.pyplot as plt

def generate_input(size):
    return [random.randint(0, size*10) for _ in range(size)]

def time_sorting_algorithm(algorithm, input_data):
    start_time = time.time()
    algorithm(input_data)
    end_time = time.time()
    return end_time - start_time

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

sizes = [1000000, 800, 20000, 400000, 600000, 100000]
quick_sort_times = []

for size in sizes:
    input_data = generate_input(size)
    time_taken = time_sorting_algorithm(quick_sort, input_data)
    quick_sort_times.append(time_taken)
    print(f"Execution time for input size {size}: {time_taken} seconds")

# Plotting
#import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.bar(range(len(sizes)), quick_sort_times, color='b', alpha=0.7)
plt.xlabel('Input Size')
plt.ylabel('Time (seconds)')
plt.title('Quick Sort Time Complexity')
plt.xticks(range(len(sizes)), sizes)
plt.grid(True)
plt.show()