# -*- coding: utf-8 -*-
"""Bucket Sort.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k_l0DTTFH1d3sHXlfXJZnlcd-fx1D_mx
"""

import time
import random

def generate_input(size):
    return [random.randint(0, size*10) for _ in range(size)]

def time_sorting_algorithm(algorithm, input_data):
    start_time = time.time()
    algorithm(input_data)
    end_time = time.time()
    return end_time - start_time

def bucket_sort(arr):
    n = len(arr)
    max_val = max(arr)
    bucket = [[] for _ in range(n)]
    for num in arr:
        index = int(num / max_val * (n - 1))
        bucket[index].append(num)
    for i in range(n):
        bucket[i] = insertion_sort(bucket[i])  # Sort each bucket using insertion sort
    k = 0
    for i in range(n):
        for j in range(len(bucket[i])):
            arr[k] = bucket[i][j]
            k += 1
    return arr

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key
    return arr

sizes = [1000000, 800, 20000, 400000, 600000, 100000]
bucket_sort_times = []

for size in sizes:
    input_data = generate_input(size)
    time_taken = time_sorting_algorithm(bucket_sort, input_data)
    bucket_sort_times.append(time_taken)
    print(f"Execution time for Bucket Sort with input size {size}: {time_taken} seconds")

# Plotting
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.bar(range(len(sizes)), bucket_sort_times, color='m', alpha=0.7)
plt.xlabel('Input Size')
plt.ylabel('Time (seconds)')
plt.title('Bucket Sort Time Complexity')
plt.xticks(range(len(sizes)), sizes)
plt.grid(True)
plt.show()