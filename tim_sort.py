# -*- coding: utf-8 -*-
"""Tim Sort.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k_l0DTTFH1d3sHXlfXJZnlcd-fx1D_mx
"""

import time
import random

def generate_input(size):
    return [random.randint(0, size*10) for _ in range(size)]

def time_sorting_algorithm(algorithm, input_data):
    start_time = time.time()
    algorithm(input_data)
    end_time = time.time()
    return end_time - start_time

def tim_sort(arr):
    min_run = 32
    n = len(arr)
    for i in range(0, n, min_run):
        insertion_sort(arr[i:min((i + min_run), n)])
    size = min_run
    while size < n:
        for start in range(0, n, size*2):
            mid = min(start + size - 1, n - 1)
            end = min(start + 2*size - 1, n - 1)
            merge(arr, start, mid, end)
        size *= 2
    return arr

def merge(arr, l, m, r):
    left = arr[l:m+1]
    right = arr[m+1:r+1]
    i = j = 0
    k = l

    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            arr[k] = left[i]
            i += 1
        else:
            arr[k] = right[j]
            j += 1
        k += 1

    while i < len(left):
        arr[k] = left[i]
        i += 1
        k += 1

    while j < len(right):
        arr[k] = right[j]
        j += 1
        k += 1
    return arr

sizes = [1000000, 800, 20000, 400000, 600000, 100000]
tim_sort_times = []

for size in sizes:
    input_data = generate_input(size)
    time_taken = time_sorting_algorithm(tim_sort, input_data)
    tim_sort_times.append(time_taken)
    print(f"Execution time for Tim Sort with input size {size}: {time_taken} seconds")

# Plotting
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.bar(range(len(sizes)), tim_sort_times, color='y', alpha=0.7)
plt.xlabel('Input Size')
plt.ylabel('Time (seconds)')
plt.title('Tim Sort Time Complexity')
plt.xticks(range(len(sizes)), sizes)
plt.grid(True)
plt.show()